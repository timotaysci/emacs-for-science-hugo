
* Introduction

In late 2023 two things happened that made me push this project forward. One, I declared config bankruptcy and started to rewrite my config from scratch and, two, the guilt of renewing this domain for another year kicked in.

This site is a extension of a [[https://www.ingentaconnect.com/content/matthey/jmtr/2022/00000066/00000002/art00002;jsessionid=85415haetimmp.x-ic-live-03][paper written in 2022]] which I hope will work as a minimal viable config for people wanting to start out using this tool within their workflows.

I have since moved way from the bench and am no longer a reserch scientist. My work has moved into helping scientists with their work using digital tools. Emacs is one such tool.

** Using this page.

This page is a single hosted file. It is written in org. If you download the file and run ~M-x org-babel-tangle-file~ and point it to  ~init.el~, that will create a config of just the parts needed by emacs. Put this in you  ~~./emacs.d~ file and you are good to go.

Raw files for both the org, and tangled .el file can be found in the assosisated GitHub repo. Let's get going!

** Essentials
This section covers basic functionality needed for either admin, quality of life, or for other programs to work.

*** Enable Melpa

[[https://melpa.org/#/][Melpa]] is /the/ emacs package repository. Most, if not all, packages in this config are grabbed from there. The below code enables this.

#+begin_src elisp :tangle init.el
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
(package-refresh-contents)
#+end_src

*** use-package

Admin, use-package allows you to isolate package configuration within the config. 
#+begin_src elisp :tangle init.el
(require 'use-package)
#+end_src


**** Enable evil mode

 
[[https://github.com/emacs-evil/evil][evil mode]] a quaility of life feature, it gives you access to vi behaviours. some workflows are better with it.
#+begin_src elisp :tangle init.el
;; Download Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))

;; Enable Evil
(require 'evil)
(evil-mode 1)

  
#+end_src


***** Auto complete in ~M-x~


#+begin_src elisp :tangle init.el


(require 'ivy)
(ivy-mode 1)


(setq ivy-on-del-error-function #'ignore)



(require 'smex)



(require 'ido)
(ido-mode 1)

(setq ido-enable-flex-matching t)


#+end_src

** Recent files 
#+begin_src elisp :tangle init.el
(recentf-mode 1)
(setq recentf-max-menu-items 25)
#+end_src

******* Aesthetics
******** Hide tool bar and menu

#+begin_src elisp :tangle init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

******** Themes

This is super subjective so choose something that works for you, a non-exhaustive list can be found [[https://emacsthemes.com/][here]].

#+begin_src elisp :tangle init.el
(require 'kanagawa-theme)
(load-theme 'kanagawa t)

#+end_src

******* Misc.


The below enable ~y~ or ~n~ when confirming interactions with emacs, like running code blocks. Far simipler than typing ~yes~ or ~no~ each time. 
#+begin_src elisp :tangle init.el
(setq use-short-answers t)
#+end_src





** Writing text

*** Focused writing

I am a big fan of writeroom-mode, which centers the text and makes the buffer full screen. Focus mode is also super neat, only showing colour formatting on the text block you are writing. Both can be enabled with ~M-x~.

#+begin_src elisp :tangle init.el
(require 'focus)
(require 'writeroom-mode)
#+end_src



*** Visual-line-mode

It's word wrap, it's needed.


#+begin_src elisp :tangle init.el
(visual-line-mode 1)
#+end_src


*** Spell check

Spell checking is clearly super important, enable it here.

#+begin_src elisp :tangle init.el
(flyspell-mode t)
#+end_src



** Org mode


*** Asthetics

This is super subjective however I love org-modern-mode. But other options include 

#+begin_src elisp :tangle init.el
(require 'org-modern-mode)
(with-eval-after-load 'org (global-org-modern-mode))
#+end_src


*** Org agenda

#+begin_src elisp :tangle init.el
  (setq org-agenda-files
      (directory-files-recursively "~/Dropbox/org" "\\.org$"))
#+end_src


**** Key bindings

#+begin_src elisp :tangle init.el
(global-set-key (kbd "<f12>") 'org-agenda)
#+end_src

*** Knowledge management

A Knowledge Management System (KMS) is indispensable in scientific academia for streamlining information retrieval, fostering collaboration, and enhancing productivity. By efficiently organizing and centralizing vast amounts of data, a KMS facilitates seamless knowledge sharing among researchers, promotes interdisciplinary integration, and ensures version control for reproducibility. It also supports intellectual property management, aids in training and onboarding, and assists in compliance with data management standards. Moreover, a KMS empowers decision-makers with valuable insights for strategic planning and resource allocation. Its adaptability ensures relevance in the dynamic landscape of scientific research, contributing significantly to the acceleration of discovery and the overall advancement of knowledge.

There are two possible systems I would suggest that can help with your KVM journey. That being org-roam or denote. I'm a big fan of denote mostly as it does not require an external database - however many love org-roam. Explore both and see what works for you.


**** Org Roam
The package is inspired by the Zettelkasten method, a note-taking and knowledge organization system. Org-roam enables users to create bi-directional links between notes, providing a dynamic way to explore relationships between different pieces of information. Users often find this approach useful for personal knowledge management, research, and organizing thoughts in a non-linear fashion.

Set your ~org-roam-directory~ and you can create your first note. Solid documentation can be found [[https://www.orgroam.com/manual.html][here]].

#+begin_src elisp :tangle init.el
(use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Dropbox/OrgRoam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-roam))


#+end_src
**** Denote

Denote is very simple, with docs [[https://protesilaos.com/emacs/denote][here]]. Simply set-up your ~denote-directory~ and use ~M-x Denote~ to get started. 


#+begin_src elisp :tangle init.el
(require 'denote)
(setq denote-directory "~/Dropbox/Denote/")
#+end_src


** snippet

YASnippet (Yet Another Snippet) package in Emacs. YASnippet is a template system for Emacs that allows you to insert frequently-used code snippets or text templates. This makes writing and producting documentatuin much faster than without. 

Install with the below:

#+begin_src bash

$ cd ~/.emacs.d/plugins
$ git clone --recursive https://github.com/joaotavora/yasnippet



  
#+end_src

then enable in the config with the below:

#+begin_src elsip :tangle init.el
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

* Bibilography

** Org-noter

Org noter acts as a way to add notes with 

#+begin_src elisp :tangle init.el

(require org-noter)
  

#+end_src

** Org-ref

#+begin_src elisp :tangle init.el

(use-package org-ref
  :ensure t
  :config
  ;; Set your bibliography file
  (setq reftex-default-bibliography '("~/Dropbox/ref/bibliography.bib"))
  
  ;; Set PDF location if you're using PDFs
  (setq org-ref-pdf-directory "~/Dropbox/ref/pdf_folder/"))

(require org-ref)
#+end_src
